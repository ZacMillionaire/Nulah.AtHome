@using Nulah.AtHome.Api.Services
@using Nulah.AtHome.Data.DTO.Events
@using Nulah.AtHome.Api.Models
@rendermode @(new InteractiveServerRenderMode(false))

<EventForm FormSubmit="CreateEvent"/>

<div class="event-table">
    <div class="event-table-header-row">
        <div class="event-table-header">
            Description
        </div>
        <div class="event-table-header">
            Start
        </div>
        <div class="event-table-header">
            End
        </div>
        <div class="event-table-header">
            Tags
        </div>
        <div class="event-table-header"></div>
    </div>
    @if (_isLoading)
    {
        // In the future this will simply disable the list to account for existing items already being available
        // which means dragging the loop below up and making sure it doesn't throw a null reference exception on event service
        <h2>Loading...</h2>
    }
    else
    {
        <div class="event-table-body">
            @foreach (var eventDto in Events)
            {
                <EventTableRow EventDto="eventDto"/>
            }
        </div>
    }
</div>

@code {

    [Inject]
    private EventService EventService { get; set; }

    private List<BasicEventDto> Events { get; set; } = new();

    private bool _isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        ArgumentNullException.ThrowIfNull(EventService);
        EventService.EventsUpdated += OnChanged;

        await EventService.LoadEvents();
        // _isLoading = false;
        // triggers the component to rerender
        await InvokeAsync(StateHasChanged);
    }

    private void OnChanged(object? sender, List<BasicEventDto> e)
    {
        // Update is loading if it was previously changed to true elsewhere, eg, a hard refresh button was clicked
        if (_isLoading)
        {
            _isLoading = false;
        }

        Events = e;

        InvokeAsync(StateHasChanged);
    }

    private async Task CreateEvent(EventFormData eventFormData)
    {
        var createEventRequest = new NewBasicEventRequest()
        {
            Description = eventFormData.Description,
            Start = eventFormData.Start,
            End = eventFormData.End,
            Tags = string.IsNullOrWhiteSpace(eventFormData.Tags)
                ? []
                : eventFormData.Tags.Split(",").ToList()
        };

        var createdEvent = await EventService.CreateEvent(createEventRequest);

        await InvokeAsync(StateHasChanged);
    }

}